#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'rubygems'
require 'gli'
require 'todo_version'

include GLI

version Todo::VERSION

#START:global_flag
desc "Path to the todo file"
arg_name "todo_file"
#START_HIGHLIGHT
default_value "~/.todo.txt"
#END_HIGHLIGHT
flag [:f,:filename]
#END:global_flag

#START:new
desc 'Create a new task in the task list'
long_desc """
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though
this can be overridden.
"""
arg_name 'task_name'
command :new do |c|

  c.desc 'set the priority of the new task, 1 being the highest'
  c.arg_name 'priority'
  c.flag :p

  c.desc 'put the new task first in the list'
  c.switch :f

  c.action do |global_options,options,args|
  end
end
#END:new

#START:format_option
desc 'List tasks'
command :list do |c|

  c.desc 'Format of the output'
  c.arg_name 'csv|pretty'
  c.default_value 'pretty'
  c.flag :format
  #END:format_option
  c.desc 'Auto-detect format based on TTY'
  c.switch 'auto-detect'
  #START:format_option

  c.action do |global_options,options,args|
  #END:format_option
    if options[:'auto-detect']
      if STDOUT.tty?
        options[:format] = 'pretty'
      else
        options[:format] = 'csv'
      end
    end
    File.open(global_options[:filename]) do |file|
      index = 1
      file.readlines.each do |todo|
        name,created,completed = todo.chomp.split(/,/)
  #START:format_option
        if options[:format] == 'pretty'
          # Use the pretty-print format
  #END:format_option
          printf("%2d - %s\n",index,name)
          printf("     %-10s %s\n","Created:",created)
          printf("     %-10s %s\n","Completed:",completed) if completed
  #START:format_option
        elsif options[:format] == 'csv'
          # Use the machine-readable CSV format
  #END:format_option
          #START:csv
          complete_flag = completed ? "C" : "U"
          printf("%d,%s,%s,%s,%s\n",index,name,complete_flag,created,completed)
          #END:csv
  #START:format_option
        end
  #END:format_option
        index += 1
      end
    end
  #START:format_option
  end
end
#END:format_option

desc 'Complete a task'
command :done do |c|
  c.action do |global_options,options,args|
  end
end

exit run(ARGV)
